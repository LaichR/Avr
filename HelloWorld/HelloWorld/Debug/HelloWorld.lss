
HelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000124  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000667  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c4  00000000  00000000  000008ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000271  00000000  00000000  00000e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000319  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000163  00000000  00000000  00001461  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  7a:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Usart_Init>:
**************************************************************/

void Usart_Init(void)
{
	
	UBRRH = 0;
  82:	10 bc       	out	0x20, r1	; 32
	//UBRRL = 12;							// initialize baud rate = 38400 at 8MHZ
	UBRRL = 5;								// initialize baud rate 34800 at 3.68MHz
  84:	85 e0       	ldi	r24, 0x05	; 5
  86:	89 b9       	out	0x09, r24	; 9
	UCSRC = 0x86;							// 8 data bits, 1 stop bit, not parity; docu page 162
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1<<TXEN)/*|(1<<RXEN)|(1<<RXCIE)*/;	// enabe tx, rx and rx interrupts
  8c:	88 e0       	ldi	r24, 0x08	; 8
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <Usart_PutChar>:
}


void Usart_PutChar( char ch)
{
	UDR = ch;
  92:	8c b9       	out	0x0c, r24	; 12
	while ( !( UCSRA & (1<<UDRE)) );
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <Usart_PutChar+0x2>
}
  98:	08 95       	ret

0000009a <main>:
void Usart_PutChar( char ch);

char helloWorld[] = "hello world\n";

int main(void)
{
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	1f 92       	push	r1
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF; // set port b as output!
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	87 bb       	out	0x17, r24	; 23
	DDRA = 0;	 // set port a as input!
  b0:	1a ba       	out	0x1a, r1	; 26
	
	volatile uint8_t portB = 0xFF;
  b2:	89 83       	std	Y+1, r24	; 0x01
	uint16_t i = 0;
	uint16_t j = 0;    
	Usart_Init();
  b4:	0e 94 41 00 	call	0x82	; 0x82 <Usart_Init>
		{
			for(j = 0; j < 200; j++);
		}
		
		char *chPtr = helloWorld;
		while(*chPtr)
  b8:	0f 2e       	mov	r0, r31
  ba:	f0 e6       	ldi	r31, 0x60	; 96
  bc:	ef 2e       	mov	r14, r31
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	ff 2e       	mov	r15, r31
  c2:	f0 2d       	mov	r31, r0
	uint16_t j = 0;    
	Usart_Init();
	uint8_t userInput = 1;
    while (userInput) 
    {	
		PORTB = portB;
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	88 bb       	out	0x18, r24	; 24
		portB = ~portB;
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	80 95       	com	r24
  cc:	89 83       	std	Y+1, r24	; 0x01
  ce:	28 ee       	ldi	r18, 0xE8	; 232
  d0:	33 e0       	ldi	r19, 0x03	; 3
  d2:	05 c0       	rjmp	.+10     	; 0xde <main+0x44>
  d4:	01 97       	sbiw	r24, 0x01	; 1
		
		for( i = 0; i < 1000; i++)
		{
			for(j = 0; j < 200; j++);
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x3a>
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	31 09       	sbc	r19, r1
    while (userInput) 
    {	
		PORTB = portB;
		portB = ~portB;
		
		for( i = 0; i < 1000; i++)
  dc:	19 f0       	breq	.+6      	; 0xe4 <main+0x4a>
void Usart_PutChar( char ch);

char helloWorld[] = "hello world\n";

int main(void)
{
  de:	88 ec       	ldi	r24, 0xC8	; 200
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	f8 cf       	rjmp	.-16     	; 0xd4 <main+0x3a>
		{
			for(j = 0; j < 200; j++);
		}
		
		char *chPtr = helloWorld;
		while(*chPtr)
  e4:	f7 01       	movw	r30, r14
  e6:	80 81       	ld	r24, Z
  e8:	88 23       	and	r24, r24
  ea:	49 f0       	breq	.+18     	; 0xfe <main+0x64>
  ec:	01 e6       	ldi	r16, 0x61	; 97
  ee:	10 e0       	ldi	r17, 0x00	; 0
		{
			Usart_PutChar(*chPtr++);
  f0:	0e 94 49 00 	call	0x92	; 0x92 <Usart_PutChar>
		{
			for(j = 0; j < 200; j++);
		}
		
		char *chPtr = helloWorld;
		while(*chPtr)
  f4:	f8 01       	movw	r30, r16
  f6:	81 91       	ld	r24, Z+
  f8:	8f 01       	movw	r16, r30
  fa:	81 11       	cpse	r24, r1
  fc:	f9 cf       	rjmp	.-14     	; 0xf0 <main+0x56>
		{
			Usart_PutChar(*chPtr++);
		}
		userInput = PINA&1;
  fe:	19 b3       	in	r17, 0x19	; 25
 100:	11 70       	andi	r17, 0x01	; 1
		Usart_PutChar(userInput);
 102:	81 2f       	mov	r24, r17
 104:	0e 94 49 00 	call	0x92	; 0x92 <Usart_PutChar>
	volatile uint8_t portB = 0xFF;
	uint16_t i = 0;
	uint16_t j = 0;    
	Usart_Init();
	uint8_t userInput = 1;
    while (userInput) 
 108:	11 11       	cpse	r17, r1
 10a:	dc cf       	rjmp	.-72     	; 0xc4 <main+0x2a>
			Usart_PutChar(*chPtr++);
		}
		userInput = PINA&1;
		Usart_PutChar(userInput);
    }
}
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0f 90       	pop	r0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	08 95       	ret

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
