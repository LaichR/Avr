
HelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001c0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800062  00800062  00000256  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aea  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c9  00000000  00000000  00000e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061e  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000556  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037e  00000000  00000000  000023aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
char helloWorld[] = "hello world\n";

int main(void)
{

}
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 95       	ret

00000098 <TogglePortPin>:
	ServoPort &= ~0x01;	
	DDRServo = 0xFF;
	TCNT0 = 0;
	TCCR0 = 0x0D;	//prescaler = 5 (1024), wgm12=1 (0x8 =Clear timer on counter match)
	OCR0 = 40;
	TIMSK |=0x2;  // enable compare match irq
  98:	93 b3       	in	r25, 0x13	; 19
  9a:	98 23       	and	r25, r24
  9c:	29 f0       	breq	.+10     	; 0xa8 <TogglePortPin+0x10>
  9e:	95 b3       	in	r25, 0x15	; 21
  a0:	80 95       	com	r24
  a2:	89 23       	and	r24, r25
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	08 95       	ret
  a8:	95 b3       	in	r25, 0x15	; 21
  aa:	89 2b       	or	r24, r25
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	08 95       	ret

000000b0 <StartControlPulse>:
	
}

void StartControlPulse(void)
{
	highPulsDuration = INIT_LOW;
  b0:	8a ee       	ldi	r24, 0xEA	; 234
  b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	TCCR2 = 0x01; // prescaler = 1 bei 3600000 Hz => 2.2us = 450 ticks f√ºr gesamtausschlag 
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
  ba:	14 bc       	out	0x24, r1	; 36
	OCR2 = 1;
  bc:	83 bd       	out	0x23, r24	; 35
	TIMSK |=0x80;  // enable compare match irq
  be:	89 b7       	in	r24, 0x39	; 57
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	89 bf       	out	0x39, r24	; 57
	ServoPort |= 1;
  c4:	a8 9a       	sbi	0x15, 0	; 21
  c6:	08 95       	ret

000000c8 <__vector_10>:
	
};


ISR(TIMER0_COMP_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
	baseRateTimer = 0;
  ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <baseRateTimer+0x1>
  ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <baseRateTimer>
	StartControlPulse();
  f2:	0e 94 58 00 	call	0xb0	; 0xb0 <StartControlPulse>
	TogglePortPin(2); 
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	0e 94 4c 00 	call	0x98	; 0x98 <TogglePortPin>
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	bf 91       	pop	r27
 102:	af 91       	pop	r26
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	7f 91       	pop	r23
 10a:	6f 91       	pop	r22
 10c:	5f 91       	pop	r21
 10e:	4f 91       	pop	r20
 110:	3f 91       	pop	r19
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25

	highPulsDuration++;
 12c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	if(highPulsDuration >= _servo1Pos)
 136:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_servo1Pos>
 13a:	89 17       	cp	r24, r25
 13c:	2c f0       	brlt	.+10     	; 0x148 <__vector_4+0x2a>
	{
		TCCR2 = 0;
 13e:	15 bc       	out	0x25, r1	; 37
		TIMSK &= ~0x80;
 140:	89 b7       	in	r24, 0x39	; 57
 142:	8f 77       	andi	r24, 0x7F	; 127
 144:	89 bf       	out	0x39, r24	; 57
		ServoPort &= ~1;		
 146:	a8 98       	cbi	0x15, 0	; 21
	}	
}
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_13>:
	}
	return False;
}

ISR(USART_RXC_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31

	while(UCSRA&(1<<RXC))
	{
		char receivedChar = UDR;
		uint8_t nextInput = (USART_rxBufferIn + 1)%USART_RX_BUFFER_SIZE;
		if( (nextInput) != USART_rxBufferOut )
 16e:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <USART_rxBufferOut>
}

ISR(USART_RXC_vect)
{

	while(UCSRA&(1<<RXC))
 172:	09 c0       	rjmp	.+18     	; 0x186 <__vector_13+0x30>
	{
		char receivedChar = UDR;
 174:	9c b1       	in	r25, 0x0c	; 12
		uint8_t nextInput = (USART_rxBufferIn + 1)%USART_RX_BUFFER_SIZE;
		if( (nextInput) != USART_rxBufferOut )
 176:	82 17       	cp	r24, r18
 178:	99 f0       	breq	.+38     	; 0x1a0 <__vector_13+0x4a>
		{	
			USART_rxBuffer[USART_rxBufferIn] = receivedChar;
 17a:	fa 01       	movw	r30, r20
 17c:	ee 59       	subi	r30, 0x9E	; 158
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	90 83       	st	Z, r25
			USART_rxBufferIn = nextInput;
 182:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <USART_rxBufferIn>
{

	while(UCSRA&(1<<RXC))
	{
		char receivedChar = UDR;
		uint8_t nextInput = (USART_rxBufferIn + 1)%USART_RX_BUFFER_SIZE;
 186:	40 91 83 00 	lds	r20, 0x0083	; 0x800083 <USART_rxBufferIn>
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	ca 01       	movw	r24, r20
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	8f 71       	andi	r24, 0x1F	; 31
 192:	90 78       	andi	r25, 0x80	; 128
 194:	99 23       	and	r25, r25
 196:	24 f4       	brge	.+8      	; 0x1a0 <__vector_13+0x4a>
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	80 6e       	ori	r24, 0xE0	; 224
 19c:	9f 6f       	ori	r25, 0xFF	; 255
 19e:	01 96       	adiw	r24, 0x01	; 1
}

ISR(USART_RXC_vect)
{

	while(UCSRA&(1<<RXC))
 1a0:	5f 99       	sbic	0x0b, 7	; 11
 1a2:	e8 cf       	rjmp	.-48     	; 0x174 <__vector_13+0x1e>
			USART_rxBuffer[USART_rxBufferIn] = receivedChar;
			USART_rxBufferIn = nextInput;
		}
	}
	
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
